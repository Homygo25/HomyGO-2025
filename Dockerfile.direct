FROM php:8.2-cli

# Install system dependencies including netcat and Node.js
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    libpq-dev \
    zip \
    unzip \
    netcat-traditional \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js and npm
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Install PHP extensions
RUN docker-php-ext-install pdo_pgsql pgsql mbstring exif pcntl bcmath gd

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /app

# Copy package.json and package-lock.json first for better caching
COPY package*.json ./

# Install node dependencies
RUN npm install

# Copy application files
COPY . .

# Install PHP dependencies
RUN composer install --no-dev --optimize-autoloader

# Build Vite assets (with debugging and fallback)
RUN echo "Building Vite assets..." && \
    npm run build && \
    echo "Build completed. Checking manifest..." && \
    ls -la public/build/ && \
    cat public/build/manifest.json && \
    echo "Build verification complete." || \
    (echo "Build failed, creating fallback..." && \
     mkdir -p public/build/assets && \
     echo '{"resources/css/app.css":{"file":"assets/app.css","isEntry":true},"resources/js/app.js":{"file":"assets/app.js","isEntry":true}}' > public/build/manifest.json && \
     echo "/* Fallback CSS */" > public/build/assets/app.css && \
     echo "/* Fallback JS */" > public/build/assets/app.js && \
     echo "Fallback created.")

# FORCE REBUILD - 2025-08-09 - Ensure proper routes are used
# Verify we have the correct routes/web.php (not emergency routes)
RUN echo "Verifying routes..." && \
    if grep -q "homepage" routes/web.php; then \
        echo "✅ Correct routes found - homepage route detected"; \
    else \
        echo "❌ Emergency routes detected - this should not happen"; \
    fi

# Create basic .env file with array cache (more reliable for deployment)
# DEPLOYMENT ID: 20250809-HTTPS-MIXED-CONTENT-FIX
RUN echo "APP_NAME=HomyGo" > .env && \
    echo "APP_ENV=production" >> .env && \
    echo "APP_DEBUG=true" >> .env && \
    echo "APP_URL=https://www.homygo.info" >> .env && \
    echo "LOG_CHANNEL=stderr" >> .env && \
    echo "LOG_LEVEL=debug" >> .env && \
    echo "DB_CONNECTION=pgsql" >> .env && \
    echo "CACHE_DRIVER=array" >> .env && \
    echo "SESSION_DRIVER=file" >> .env && \
    echo "SESSION_LIFETIME=120" >> .env && \
    echo "QUEUE_CONNECTION=sync" >> .env

# Generate application key
RUN php artisan key:generate --force

# Run database migrations to create cache table
RUN php artisan migrate --force || echo "Migrations skipped - will run on startup"

# Clear caches
RUN php artisan config:clear || true
RUN php artisan route:clear || true
RUN php artisan view:clear || true
RUN php artisan cache:clear || true

# Create the most direct startup possible with database setup
RUN echo '#!/bin/bash' > /direct-start.sh && \
    echo 'echo "=== HOMYGO DIRECT START ==="' >> /direct-start.sh && \
    echo 'echo "Bypassing all entrypoint scripts"' >> /direct-start.sh && \
    echo 'cd /app' >> /direct-start.sh && \
    echo 'echo "Setting up environment..."' >> /direct-start.sh && \
    echo 'export CACHE_DRIVER=${CACHE_DRIVER:-array}' >> /direct-start.sh && \
    echo 'export SESSION_DRIVER=${SESSION_DRIVER:-file}' >> /direct-start.sh && \
    echo 'export DB_HOST=${DB_HOST}' >> /direct-start.sh && \
    echo 'export DB_PORT=${DB_PORT}' >> /direct-start.sh && \
    echo 'export DB_DATABASE=${DB_DATABASE}' >> /direct-start.sh && \
    echo 'export DB_USERNAME=${DB_USERNAME}' >> /direct-start.sh && \
    echo 'export DB_PASSWORD=${DB_PASSWORD}' >> /direct-start.sh && \
    echo 'echo "Cache driver: $CACHE_DRIVER"' >> /direct-start.sh && \
    echo 'echo "Clearing caches..."' >> /direct-start.sh && \
    echo 'php artisan route:clear 2>/dev/null || true' >> /direct-start.sh && \
    echo 'php artisan view:clear 2>/dev/null || true' >> /direct-start.sh && \
    echo 'php artisan config:clear 2>/dev/null || true' >> /direct-start.sh && \
    echo 'echo "Checking Vite manifest..."' >> /direct-start.sh && \
    echo 'if [ ! -f "public/build/manifest.json" ]; then' >> /direct-start.sh && \
    echo '  echo "⚠️  Vite manifest missing, creating fallback..."' >> /direct-start.sh && \
    echo '  mkdir -p public/build/assets' >> /direct-start.sh && \
    echo '  echo '"'"'{"resources/css/app.css":{"file":"assets/app.css","isEntry":true},"resources/js/app.js":{"file":"assets/app.js","isEntry":true}}'"'"' > public/build/manifest.json' >> /direct-start.sh && \
    echo '  echo "/* Fallback CSS */" > public/build/assets/app.css' >> /direct-start.sh && \
    echo '  echo "/* Fallback JS */" > public/build/assets/app.js' >> /direct-start.sh && \
    echo '  echo "✅ Fallback assets created"' >> /direct-start.sh && \
    echo 'else' >> /direct-start.sh && \
    echo '  echo "✅ Vite manifest found"' >> /direct-start.sh && \
    echo 'fi' >> /direct-start.sh && \
    echo 'chmod -R 755 public/build 2>/dev/null || true' >> /direct-start.sh && \
    echo 'if [ "$CACHE_DRIVER" = "database" ]; then' >> /direct-start.sh && \
    echo '  echo "Running database migrations for cache..."' >> /direct-start.sh && \
    echo '  php artisan migrate --force || echo "Migration failed - using array cache"' >> /direct-start.sh && \
    echo '  export CACHE_DRIVER=array' >> /direct-start.sh && \
    echo 'fi' >> /direct-start.sh && \
    echo 'echo "Starting PHP server directly on port $PORT"' >> /direct-start.sh && \
    echo 'exec php -S 0.0.0.0:$PORT -t public/' >> /direct-start.sh && \
    chmod +x /direct-start.sh

# Set execute permissions
RUN chmod +x /direct-start.sh

# Use the most direct command possible
CMD ["/bin/bash", "/direct-start.sh"]
